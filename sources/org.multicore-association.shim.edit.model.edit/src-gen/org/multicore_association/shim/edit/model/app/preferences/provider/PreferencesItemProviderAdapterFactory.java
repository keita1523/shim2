/**
 */
package org.multicore_association.shim.edit.model.app.preferences.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.multicore_association.shim.edit.model.app.preferences.util.PreferencesAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PreferencesItemProviderAdapterFactory extends PreferencesAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PreferencesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.AccessTypePreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccessTypePreferencesItemProvider accessTypePreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.AccessTypePreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccessTypePreferencesAdapter() {
		if (accessTypePreferencesItemProvider == null) {
			accessTypePreferencesItemProvider = new AccessTypePreferencesItemProvider(this);
		}

		return accessTypePreferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.AddressSpacePreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddressSpacePreferencesItemProvider addressSpacePreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.AddressSpacePreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddressSpacePreferencesAdapter() {
		if (addressSpacePreferencesItemProvider == null) {
			addressSpacePreferencesItemProvider = new AddressSpacePreferencesItemProvider(this);
		}

		return addressSpacePreferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.CacheDataPreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CacheDataPreferencesItemProvider cacheDataPreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.CacheDataPreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCacheDataPreferencesAdapter() {
		if (cacheDataPreferencesItemProvider == null) {
			cacheDataPreferencesItemProvider = new CacheDataPreferencesItemProvider(this);
		}

		return cacheDataPreferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.CacheDataUnitPreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CacheDataUnitPreferencesItemProvider cacheDataUnitPreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.CacheDataUnitPreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCacheDataUnitPreferencesAdapter() {
		if (cacheDataUnitPreferencesItemProvider == null) {
			cacheDataUnitPreferencesItemProvider = new CacheDataUnitPreferencesItemProvider(this);
		}

		return cacheDataUnitPreferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.CommunicationSetPreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationSetPreferencesItemProvider communicationSetPreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.CommunicationSetPreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommunicationSetPreferencesAdapter() {
		if (communicationSetPreferencesItemProvider == null) {
			communicationSetPreferencesItemProvider = new CommunicationSetPreferencesItemProvider(this);
		}

		return communicationSetPreferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.ComponentSetPreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentSetPreferencesItemProvider componentSetPreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.ComponentSetPreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentSetPreferencesAdapter() {
		if (componentSetPreferencesItemProvider == null) {
			componentSetPreferencesItemProvider = new ComponentSetPreferencesItemProvider(this);
		}

		return componentSetPreferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.ComponentsPreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentsPreferencesItemProvider componentsPreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.ComponentsPreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentsPreferencesAdapter() {
		if (componentsPreferencesItemProvider == null) {
			componentsPreferencesItemProvider = new ComponentsPreferencesItemProvider(this);
		}

		return componentsPreferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.LatencyPreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LatencyPreferencesItemProvider latencyPreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.LatencyPreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLatencyPreferencesAdapter() {
		if (latencyPreferencesItemProvider == null) {
			latencyPreferencesItemProvider = new LatencyPreferencesItemProvider(this);
		}

		return latencyPreferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.MasterComponentPreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MasterComponentPreferencesItemProvider masterComponentPreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.MasterComponentPreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMasterComponentPreferencesAdapter() {
		if (masterComponentPreferencesItemProvider == null) {
			masterComponentPreferencesItemProvider = new MasterComponentPreferencesItemProvider(this);
		}

		return masterComponentPreferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.PitchPreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PitchPreferencesItemProvider pitchPreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.PitchPreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPitchPreferencesAdapter() {
		if (pitchPreferencesItemProvider == null) {
			pitchPreferencesItemProvider = new PitchPreferencesItemProvider(this);
		}

		return pitchPreferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.SavePolicyPreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SavePolicyPreferencesItemProvider savePolicyPreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.SavePolicyPreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSavePolicyPreferencesAdapter() {
		if (savePolicyPreferencesItemProvider == null) {
			savePolicyPreferencesItemProvider = new SavePolicyPreferencesItemProvider(this);
		}

		return savePolicyPreferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.ShimPreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShimPreferencesItemProvider shimPreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.ShimPreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShimPreferencesAdapter() {
		if (shimPreferencesItemProvider == null) {
			shimPreferencesItemProvider = new ShimPreferencesItemProvider(this);
		}

		return shimPreferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.multicore_association.shim.edit.model.app.preferences.SlaveComponentPreferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SlaveComponentPreferencesItemProvider slaveComponentPreferencesItemProvider;

	/**
	 * This creates an adapter for a {@link org.multicore_association.shim.edit.model.app.preferences.SlaveComponentPreferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlaveComponentPreferencesAdapter() {
		if (slaveComponentPreferencesItemProvider == null) {
			slaveComponentPreferencesItemProvider = new SlaveComponentPreferencesItemProvider(this);
		}

		return slaveComponentPreferencesItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
